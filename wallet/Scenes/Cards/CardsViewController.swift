//
//  CardsViewController.swift
//  wallet
//
//  Created by Pietro Basso on 14/02/2019.
//  Copyright (c) 2019 Pietro Basso. All rights reserved.
//
//  This file was generated by the Lisca Xcode Templates so
//  you can apply lisca architecture to your iOS projects
//

import UIKit
import RxSwift
import RxCocoa

protocol CardsViewControllerInput {
    var title: Driver<String> { get }
}

protocol CardsViewControllerOutput {
    var action: AnyObserver<CardsAction> { get }
}

enum CardsAction {
    case viewLoaded
    case addButtonTapped
}

class CardsViewController: UIViewController {
    
    let input: CardsViewControllerInput
    let output: CardsViewControllerOutput
    private let disposeBag = DisposeBag()
    
    // MARK: - Views
    
    // MARK: - Lifecycle
    
    init(input: CardsViewControllerInput, output: CardsViewControllerOutput) {
        self.input = input
        self.output = output
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupAppearance()
        addSubviews()
        setupBindings()
        output.action.onNext(.viewLoaded)
    }

    private func setupAppearance() {
        let gradientLayer = CAGradientLayer(frame: view.frame,
                                            color: .radicalRed,
                                            startPoint: CGPoint(x: 1, y: 1),
                                            endPoint: CGPoint(x: 0, y: 0))
        view.layer.insertSublayer(gradientLayer, at: 0)
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.add, target: self, action: #selector(addButtonTapped))
    }
    
    private func addSubviews() {}
    
    private func setupBindings() {
        input.title.asObservable()
            .bind(to: rx.title)
            .disposed(by: disposeBag)
        input.title.asObservable()
            .subscribe(onNext: { [weak self] (title) in
                self?.title = title
                self?.tabBarItem.title = title
            })
            .disposed(by: disposeBag)
    }
    
    @objc private func addButtonTapped() {
        output.action.onNext(.addButtonTapped)
    }
}
