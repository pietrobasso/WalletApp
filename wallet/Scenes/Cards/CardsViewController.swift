//
//  CardsViewController.swift
//  wallet
//
//  Created by Pietro Basso on 14/02/2019.
//  Copyright (c) 2019 Pietro Basso. All rights reserved.
//
//  This file was generated by the Lisca Xcode Templates so
//  you can apply lisca architecture to your iOS projects
//

import UIKit
import RxSwift
import RxCocoa

protocol CardsViewControllerInput {
    var title: Driver<String> { get }
    var dataSource: Driver<[Card.Descriptor]> { get }
}

protocol CardsViewControllerOutput {
    var action: AnyObserver<CardsAction> { get }
}

enum CardsAction {
    case viewLoaded
    case addButtonTapped
    case didTapCellAt(IndexPath)
}

class CardsViewController: UIViewController {
    
    let input: CardsViewControllerInput
    let output: CardsViewControllerOutput
    private let disposeBag = DisposeBag()
    private var dataSource = [Card.Descriptor]()
    
    // MARK: - Views
    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.itemSize = CGSize(width: (view.frame.size.width - 10) / 2.0, height: 80)
        layout.minimumInteritemSpacing = 0
        layout.minimumLineSpacing = 0
        let collectionView = NoDelayCollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(cellType: CardCell.self)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.contentInset = UIEdgeInsets(top: 10, left: 5, bottom: 10, right: 5)
        return collectionView
    }()
    
    // MARK: - Lifecycle
    
    init(input: CardsViewControllerInput, output: CardsViewControllerOutput) {
        self.input = input
        self.output = output
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupAppearance()
        addSubviews()
        setupBindings()
        output.action.onNext(.viewLoaded)
    }

    private func setupAppearance() {
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.add, target: self, action: #selector(addButtonTapped))
        collectionView.backgroundColor = .white
    }
    
    private func addSubviews() {
        view.addSubview(collectionView)
        collectionView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
    }
    
    private func setupBindings() {
        input.title.asObservable()
            .bind(to: rx.title)
            .disposed(by: disposeBag)
        input.title.asObservable()
            .subscribe(onNext: { [weak self] (title) in
                self?.title = title
                self?.tabBarItem.title = title
            })
            .disposed(by: disposeBag)
        input.dataSource
            .drive(onNext: { [weak self] (dataSource) in
                self?.dataSource = dataSource
                self?.collectionView.reloadData()
            })
            .disposed(by: disposeBag)
    }
    
    @objc private func addButtonTapped() {
        output.action.onNext(.addButtonTapped)
    }
}

// MARK: - Extension: UICollectionViewDataSource
extension CardsViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let viewModel = dataSource[safe: indexPath.row] else { return UICollectionViewCell() }
        let cell = collectionView.dequeueReusableCell(for: indexPath) as CardCell
        cell.configure(with: viewModel)
        cell.rx.tap
            .asSignal()
            .debounce(0.1)
            .emit(onNext: { [weak self] _ in
                self?.output.action.onNext(.didTapCellAt(indexPath))
            })
            .disposed(by: cell.rx.disposeBag)
        return cell
    }
    
    
}

// MARK: - Extension: UICollectionViewDelegate
extension CardsViewController: UICollectionViewDelegate {
    
}
